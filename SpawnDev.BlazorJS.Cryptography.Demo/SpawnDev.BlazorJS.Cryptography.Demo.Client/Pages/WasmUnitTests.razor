@page "/WasmUnitTests"
@using SpawnDev.BlazorJS.Cryptography.Browser
@using SpawnDev.BlazorJS.RemoteJSRuntime
@using SpawnDev.Blazor.UnitTesting
@using System.Reflection
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>Home</PageTitle>

<h1>Tests</h1>

<div>
    <ul>
        <li>
            DotNetCrypto service runs on the browser and uses the Microsoft.Security.Cryptography library, which does not fully support the browser platform.
        </li>
        <li>
            BrowserCrypto service runs on the web browser and uses the browser's SubtleCrypto API.<br/>
            It uses the Blazor IJSRuntime and is compatible with both server side rendering and webassembly rendering.
        </li>
    </ul>
    
</div>

<UnitTestsView TypeInstanceResolver="TestTypeResolver" TestAssemblies="Assemblies" TestTypes="Types"></UnitTestsView>

@code {
    [Inject]
    BlazorJSRuntimeAsync JSA { get; set; }

    [Inject]
    BlazorJSRuntime JS { get; set; }

    [Inject]
    BrowserCrypto BrowserCrypto { get; set; }

    [Inject]
    BrowserWASMCrypto DotNetCrypto { get; set; }

    [Inject]
    IJSRuntime JSR { get; set; }

    List<Assembly>? Assemblies = new List<Assembly>();
    List<Type>? Types = new List<Type>();

    protected override void OnInitialized()
    {
        Types = new List<Type> { this.GetType() };
    }
    object? TestTypeResolver(Type testType) => testType == this.GetType() ? this : null;
    async Task Log(params object[] obj)
    {
        try
        {
            await JSR!.CallVoidAsync("console.log", obj);
        }
        catch { }
    }
    [TestMethod]
    public async Task SHATest()
    {
        var data = new byte[] { 0, 1, 2 };
        // ******************** SHA ********************
        // - Server
        // DotNetCrypto indicated by the appended D, executes on the server using Microsoft.Security.Cryptography
        var hashD = await DotNetCrypto.Digest("SHA-512", data);

        // - Browser
        // BrowserCrypto indicated by the appended B, executes on the browser using Javascript's SubtleCrypto APIs
        var hashB = await BrowserCrypto.Digest("SHA-512", data);

        // verify the hashes match
        if (!hashB.SequenceEqual(hashD))
        {
            throw new Exception("Hash mismatch");
        }
    }
    [TestMethod]
    public async Task ECDHGenerateExportImportSharedSecretTest()
    {
        // ******************** ECDH ********************
        // - Server
        // generate server ECDH key
        var ecdhD = await DotNetCrypto.GenerateECDHKey();
        // export ecdhD public key for browser to use
        var ecdhDPublicKeyBytes = await DotNetCrypto.ExportPublicKeySpki(ecdhD);

        // - Browser
        // generate browser ECDH key
        var ecdhB = await BrowserCrypto.GenerateECDHKey();
        // export ecdhB public key for server to use
        var ecdhBPublicKeyBytes = await BrowserCrypto.ExportPublicKeySpki(ecdhB);

        // - Server
        // import the browser's ECDH public key using DotNetCrypto so DotNetCrypto can work with it
        var ecdhBPublicKeyD = await DotNetCrypto.ImportECDHKey(ecdhBPublicKeyBytes);
        // create shared secret
        var sharedSecretD = await DotNetCrypto.DeriveBits(ecdhD, ecdhBPublicKeyD);

        // - Browser
        // import the server's ECDH public key using BrowserCrypto so BrowserCrypto can work with it
        var ecdhDPublicKeyB = await BrowserCrypto.ImportECDHKey(ecdhDPublicKeyBytes);
        // create shared secret
        var sharedSecretB = await BrowserCrypto.DeriveBits(ecdhB, ecdhDPublicKeyB);

        // verify the shared secrets match
        if (!sharedSecretB.SequenceEqual(sharedSecretD))
        {
            throw new Exception("Shared secret mismatch");
        }
    }
}