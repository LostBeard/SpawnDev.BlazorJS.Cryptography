@page "/test"
@using System.Text
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>PortableCrypto Test</PageTitle>

<h1>PortableCrypto Test</h1>

<button class="btn btn-primary" disabled="@Busy" @onclick="IncrementCount">Click me</button>

<div>
    ECDH public key:<br />
    <div style="width: 400px; height: 10rem; word-break: break-all; word-wrap: anywhere; overflow: hidden;">@ECDHKeyB64</div>
</div>
<div>
    ECDSA public key:<br />
    <div style="width:400px; height: 10rem; word-break: break-all; word-wrap: anywhere; overflow: hidden;">@ECDSAKeyB64</div>
</div>
<div>
    Server ECDH public key:<br />
    <div style="width: 400px; height: 10rem; word-break: break-all; word-wrap: anywhere; overflow: hidden;">@ServerECDHKeyB64</div>
</div>
<div>
    Server ECDSA public key:<br />
    <div style="width:400px; height: 10rem; word-break: break-all; word-wrap: anywhere; overflow: hidden;">@ServerECDSAKeyB64</div>
</div>


@code {
    static string TestString = "Hello world!";

    private int currentCount = 0;

    [Inject]
    HttpClient HttpClient { get; set; }

    [Inject]
    PortableCrypto PortableCrypto { get; set; }

    // local ECDSA key for signing
    PortableECDSAKey? ECDSAKey = null;
    // local ECDH for shared secret creation
    PortableECDHKey? ECDHKey = null;
    // base 64 representation of local ECDSA public key
    string? ECDSAKeyB64 = null;
    // base 64 representation of local ECDH public key
    string? ECDHKeyB64 = null;

    // server's ECDSA key for verifying server signatures
    PortableECDSAKey? ServerECDSAKey = null;
    // server's ECDH key for creating a shared secret with the server
    PortableECDHKey? ServerECDHKey = null;
    // base 64 representation of the server's ECDSA public key
    string? ServerECDSAKeyB64 = null;
    // base 64 representation of the server's ECDH public key
    string? ServerECDHKeyB64 = null;

    int BusyCount = 0;
    bool Busy => BusyCount > 0;

    private async Task IncrementCount()
    {
        BusyCount++;
        StateHasChanged();
        try
        {
            // create local ECDSA key for signing
            ECDSAKey ??= await PortableCrypto.GenerateECDSAKey();
            // create local ECDH for shared secret creation
            ECDHKey ??= await PortableCrypto.GenerateECDHKey();
            ECDSAKeyB64 ??= Convert.ToBase64String(await PortableCrypto.ExportPublicKeySpki(ECDSAKey!));
            ECDHKeyB64 ??= Convert.ToBase64String(await PortableCrypto.ExportPublicKeySpki(ECDHKey!));
            ServerECDSAKey ??= await PortableCrypto.ImportECDSAKey(await Get<byte[]>("ecdsa"));
            ServerECDHKey ??= await PortableCrypto.ImportECDHKey(await Get<byte[]>("ecdh"));
            ServerECDSAKeyB64 ??= Convert.ToBase64String(await PortableCrypto.ExportPublicKeySpki(ServerECDSAKey!));
            ServerECDHKeyB64 ??= Convert.ToBase64String(await PortableCrypto.ExportPublicKeySpki(ServerECDHKey!));
            // derive a shared secret using the other party's (server's) public ECDH key and this party's (browser's) private ECDH key
            // the shared secret should be identical on both sides
            var sharedSecret = await PortableCrypto.DeriveBits(ECDHKey, ServerECDHKey);
            // get the shared secret from the server to verify it matches (you would never do this in production)
            var serversSharedSecret = await Post<byte[]>("GetSharedSecret", new GetSharedSecretArgs { SenderECDHPublicKeyB64 = ECDHKeyB64 });
            if (serversSharedSecret == null || !sharedSecret.SequenceEqual(serversSharedSecret))
            {
                throw new Exception("The server generated shared secret did not match the locally generated shared secret");
            }
            // create an encryption key based on the shared secret
            using var encKey = await PortableCrypto.GenerateAESGCMKey(sharedSecret);
            // encrypt test message to send to the server to verify it can decrypt it. it will reply with an encrypted message we must decode.
            var testMsgBytes = Encoding.UTF8.GetBytes(TestString);
            var encMsg = await PortableCrypto.Encrypt(encKey, testMsgBytes);
            // send to the server
            var serversEncryptedResponse = await Post<byte[]>("EncryptionTest", new EncryptionTestArgs { EncryptedMessage = encMsg, SenderECDHPublicKeyB64 = ECDHKeyB64 });
            // decrypt the server's response
            var serversDecryptedResponse = await PortableCrypto.Decrypt(encKey, serversEncryptedResponse);
            // convert bytes to text
            var response = Encoding.UTF8.GetString(serversDecryptedResponse);
            if ("Response message!" != response)
            {
                throw new Exception("Failed to decrypt the message");
            }
        }
        finally
        {
            BusyCount--;
        }
        StateHasChanged();
    }
    public class GetSharedSecretArgs
    {
        public string SenderECDHPublicKeyB64 { get; set; }
    }
    public class EncryptionTestArgs
    {
        public string SenderECDHPublicKeyB64 { get; set; }
        public byte[] EncryptedMessage { get; set; }
    }
    private async Task<T?> Post<T>(string endpoint, object data) where T : class
    {
        try
        {
            var resp = await HttpClient.PostAsJsonAsync($"api/CryptographyTest/{endpoint}", data);
            if (resp.IsSuccessStatusCode)
            {
                return await resp.Content.ReadFromJsonAsync<T>();
            }
        }
        catch { }
        return default;
    }
    private async Task<T?> Get<T>(string endpoint) where T : class
    {
        try
        {
            return await HttpClient.GetFromJsonAsync<T>($"api/CryptographyTest/{endpoint}");
        }
        catch { }
        return default;
    }
}
